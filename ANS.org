*Вопрос* Рассмотрите [[./mutex-example-1.c][пример работы с мьютексом]] (файл =mutex-example-1.c=). Что будет если [[./mutex-example.c][убрать использование мьютекса]] (файл =mutex-example.c=)? Объясните поведение.

Если убрать мьютекс то из-за shared ресурса (счётчика) возникнет недетерминированное поведение.
Потоки будут пытаться одновременно увеличивать и уменьшать счётчик, что приведёт к непредсказуемым результатам.

*Задание 0.5* Добавьте мьютекс в код из [[./thread-example-1.c][предыдущего примера]] для синхронизации вывода в функции =bad_print=.

См. файл =task-0.5.c=.

*Вопрос* что именно возвращает =fork()= в родительском процессе? А что в дочернем? См. =man fork=.

В родительском процессе =fork()= возвращает PID дочернего процесса, а в дочернем - 0.

*Вопрос* изучите данную программу. Скомпилируйте её, запустите. Проверьте правильность PID дочернего процесса с помощью =pstree= или иными способами. Изучите содержимое =/proc/PID/maps= для родительского и дочернего процессов, найдите общую область памяти.

/home/alex/Sandbox/seminar-8/fork-example-1
Shared memory at: 0x7ffff7ffa000
Child's pid is: 2939689

alex@ubnt:~$ pstree -p 2939688
fork-example-1(2939688)───fork-example-1(2939689)

alex@ubnt:~$ cat /proc/2939688/maps | grep 7ffff7ffa000
7ffff7fef000-7ffff7ffa000 r--p 0002c000 103:02 4458067                   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
7ffff7ffa000-7ffff7ffb000 rw-s 00000000 00:01 784005                     /dev/zero (deleted)

Видим, что общая область памяти - /dev/zero (deleted).

*Задание 1* модифицируйте программу выше следующим образом:
  - Необходимо выделить память для 10 чисел типа =int= и сделать её общей для родительского и дочернего процессов. Внесите туда числа от 1 до 10.
  - Родительский процесс будет ждать завершения дочернего процесса с помощью =wait(NULL)=. После этого он должен вывести все 10 чисел на экран.
  - Дочерний процесс считывает два числа с помощью =scanf=: индекс в массиве и новое значение. Он меняет соответствующее число в массиве и завершает свою работу.

См. файл =task-1.c=.

*Вопрос* Рассмотрите [[./pipe-example-1.c][пример программы]], которая в дочернем потоке читает строки со входа и отправляет их родительскому процессу через конвейер. Нужно ли было в данном примере использовать специальное сообщение о завершении ввода из дочернего процесса?

Да, нужно, иначе родительский процесс будет ждать ввода бесконечно и в текущей реализации никак не узнает, что ввод завершён.

*Задание 2* Попробуйте синхронизировать процессы из *Задания 1*, используя конвейеры. Теперь дочерний процесс будет сообщать родительскому об изменении данных, отправляя сообщение по конвейеру. При получении сообщения родительский процесс должен вывести массив на экран. Дочерний процесс будт продолжать ожидать ввод от пользователя и менять эллементы массива пока не получит на вход отрицательный индекс - тогда он завершается.

См. файл =task-2.c=.

*Вопрос*  Чем семафоры отличаются от мьютексов? Чем семафор с двумя состояниями отличается от мьютекса?

Семафоры могут иметь несколько состояний, в то время как мьютекс всегда имеет два состояния: заблокирован и разблокирован.
Семафор может быть освобождён несколькими потоками, в то время как мьютекс - только одним: тем, кто его заблокировал.

*Задание 3* Используте семафор для синхронизации между процессами в *Задании 2*.

См. файл =task-3.c=.

#+begin_src c
int x = 0;
int y = 0;
void thread1() {
  x = 1;
  print(y);
}
void thread2() {
  y = 1;
  print(x);
}

#+end_src

*Вопрос* в чём проблема в этом коде? Какие пары чисел могут быть выведены в зависимости от того, в каком порядке будут выполнены инструкции разных потоков? Какое влияние оказывают перестановки компилятором?

Проблема в том, что потоки могут быть выполнены в любом порядке и в зависимости от этого будут выводиться разные числа.

*Задание 4* разберите пример =cpu-reordering.c=; он дублирует пример с чтениями и записью в =x= и =y=, но прогоняет его множество раз. При этом семафоры используются чтобы программа запускала вычисления в каждом потоке и по завершению итерации ждала, пока второй поток завершит свою итерацию.
Объясните, как в этой программе используются семафоры и как происходит детектирование реордерингов. Затем попробуйте вставить полные барьеры времени компиляции туда, где это необходимо. Попробуйте также вариант с полным барьером для компиляции и с соответствующей инструкцией процессора для полного барьера. Объясните результаты.


Что происходит в программе:
1. Создаются два потока, каждый из которых выполняет функцию =thread0= и =thread1= соответственно.
2. В каждой функции выполняется цикл, в котором переменные =x= и =y= присваиваются значениями 1 и 1 соответственно.
3. После этого переменные =read0= и =read1= присваиваются значениями =x= и =y= соответственно.

На каждой итерации мы ждём завершения обоих потоков.
По идее, хотя бы 1 значение из =read0= и =read1= должно быть равно 1, но из-за реордеринга это не всегда так.

См. файл =task-4.c=.

